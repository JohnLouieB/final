@model Icarus.Models.AssertionNew

@{
    ViewBag.Title = "Admission Browse";
}


<div class="col-sm-12 pl-3 pr-3">
    <div class="d-flex mb-2 mt-2 justify-content-between">
        <input class="form-control col-sm-4" id="mySearch" type="search" placeholder="Search" aria-label="Search">
        <div>
            <button class="btn" style="background-color:#4E58A2;color:white;" data-toggle="modal" data-target="#assertionModal">
                <i class="fa fa-plus-circle" aria-hidden="true"></i>
                <span>&nbsp;Add Assertion</span>
            </button>
        </div>
    </div>
    <hr>
    @if (!Model.assertionLists.Any() || Model.assertionLists == null)
    {
        <div>No assertion records yet.</div>
    }
    else
    {
        <div class="scroll">
            <table class="table table-striped table-hover table-borderless assertionTable">
                <thead style="background-color: #6C7AE0; color: white;">
                    <tr>
                        <th class="tableheadleft" scope="col">
                            ID CTC
                        </th>
                        <th scope="col">
                            Posted Date
                        </th>
                        <th scope="col">
                            Description
                        </th>
                        <th scope="col">
                            Category
                        </th>
                        <th scope="col">
                            Quantity
                        </th>
                        <th scope="col">
                            Price
                        </th>
                        <th scope="col">
                            MarkUp %
                        </th>
                        <th scope="col">
                            Markup Value
                        </th>
                        <th scope="col">
                            MarkUp Price
                        </th>
                        <th scope="col">
                            Subtotal
                        </th>
                        <th class="tableheadright" scope="col">
                            Notes
                        </th>
                    </tr>
                </thead>
                <tbody id="thisTable">
                    @foreach (var item in Model.assertionLists)
                    {
                        var markUpPrice = item.Price + ((item.Price * 20) / 100);
                        <tr>
                            <td>@item.IDAssertion</td>
                            <td>@item.PostedDate</td>
                            <td>@item.Description</td>
                            <td>@item.IDAssertionCategory</td>
                            <td>@item.Qty</td>
                            <td>@item.Price</td>
                            <td>@item.Markup</td>
                            <td>@item.MarkupValue</td>
                            <td>@markUpPrice</td>
                            <td>@markUpPrice</td>
                            <td>@item.Notes</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    <div class="modal fade" id="assertionModal" tabindex="-1" role="dialog" aria-labelledby="gridSystemModalLabel">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="gridSystemModalLabel">Add Assertion</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                </div>
                <div class="modal-body">
                    @using (Html.BeginForm())
                    {
                        @Html.AntiForgeryToken()
                        <form>
                            <div class="form-row">
                                <div class="form-group col-sm-4">
                                    @Html.LabelFor(model => model.assertion.IDAdmission)
                                    @Html.EditorFor(model => model.assertion.IDAdmission, new { htmlAttributes = new { @class = "form-control", Value = Model.admission.IDAdmission, disabled = true } })
                                </div>
                                <div class="form-group col-sm-4">
                                    @Html.LabelFor(model => model.assertion.AssertionDate)
                                    @Html.TextBoxFor(model => model.assertion.AssertionDate, new { @type = "datetime-local", @class = "form-control datetimepicker" })
                                </div>
                                <div class="form-group col-sm-4">
                                    @Html.LabelFor(model => model.assertion.Qty)
                                    @Html.EditorFor(model => model.assertion.Qty, new { htmlAttributes = new { @type = "number", @class = "form-control" } })
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-group col-sm-4">
                                    @Html.LabelFor(model => model.assertion.IDAssertionCategory)
                                    @Html.DropDownListFor(model => model.assertion.IDAssertionCategory, ViewBag.assertions as SelectList, "",new { @class = "form-control" })
                                </div>
                                <div class="form-group col-sm-4">
                                    @Html.LabelFor(model => model.assertion.Price)
                                    @Html.EditorFor(model => model.assertion.Price, new { htmlAttributes = new { @type = "number", @class = "form-control" } })
                                </div>
                                <div class="form-group col-sm-4">
                                    @Html.LabelFor(model => model.assertion.Markup)
                                    @Html.EditorFor(model => model.assertion.Markup, new { htmlAttributes = new { @type="number", @class = "form-control", Value=20} })
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-group col-sm-4">
                                    @Html.LabelFor(model => model.assertion.MarkupValue)
                                    @Html.EditorFor(model => model.assertion.MarkupValue, new { htmlAttributes = new { @type = "number", @class = "form-control markUpValue" } })
                                </div>
                                <div class="form-group col-sm-4">

                                </div>
                                <div class="form-group col-sm-4">

                                </div>
                            </div>
                        </form>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-sm btn-danger" data-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-sm btn-primary">Add</button>
                </div>
            </div><!-- /.modal-content -->
        </div><!-- /.modal-dialog -->
    </div><!-- /.modal -->
</div>
<style>
    .tableheadleft {
        border-top-left-radius: 15px !important;
    }

    .tableheadright {
        border-top-right-radius: 15px !important;
    }
    .assertionTable::-webkit-scrollbar {
        width: 12px; /* width of the entire scrollbar */
        background-color: #dddddd;
        height: 10px;
    }

    .assertionTable::-webkit-scrollbar-track {
        background: #dddddd !important; /* color of the tracking area */
    }

    .assertionTable::-webkit-scrollbar-thumb {
        background: #808080 !important; /* color of the scroll thumb */
        border-radius: 20px; /* roundness of the scroll thumb */
        border: 3px solid grey !important; /* creates padding around scroll thumb */
    }
    .assertionTable {
        display:block;
        overflow-x: auto;
        white-space: nowrap;
    }
    
</style>
<script>
    $(document).ready(function () {
        $("#mySearch").on("keyup", function () {
            var value = $(this).val().toLowerCase();
            $("#thisTable tr").filter(function () {
                $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
            });
        });
    });
</script>

